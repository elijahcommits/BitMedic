---
// src/components/WindowsToolbar.astro
const buildTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
---

<div class="windows-toolbar">
  <div class="start-button-container">
    <button class="start-button" type="button" aria-haspopup="true" aria-expanded="false" aria-label="Start Menu">
      <img src="/BitMedic/icons/bitmedic_logo2-onlylogo_transparent.svg" alt="Start" class="start-icon" />
      <span>Start</span> {/* Wrapped text in span for better control if needed */}
    </button>
    <div class="start-menu" role="menu">
      <ul>
        <li><a href="/BitMedic/about/" role="menuitem">About</a></li>
        <li><a href="/BitMedic/contact/" role="menuitem">Contact</a></li>
        <li><a href="/BitMedic/tech/" role="menuitem">Recommended Tech</a></li>
        <li><a href="/BitMedic/merch/" role="menuitem">Merch</a></li>
        <li class="divider"><hr /></li>
        <li><a href="https://search.brave.com/" target="_blank" rel="noopener noreferrer" role="menuitem">Log Off...</a></li>
      </ul>
    </div>
  </div>

  <div class="clock-container">
    <span class="clock-time">{buildTime}</span>
  </div>
</div>

<style>
  .windows-toolbar {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 40px;
    background-color: #c0c0c0;
    border-top: 2px solid #ffffff;
    box-shadow: inset 0 1px 1px #dfdfdf;
    display: flex;
    align-items: center;
    padding: 0 5px;
    font-family: 'Tahoma', 'Geneva', 'MS Sans Serif', sans-serif;
    font-size: 15px;
    color: #000000;
    z-index: 1000;
    box-sizing: border-box;
    line-height: 1; /* Explicit line height for toolbar */
  }

  .start-button-container {
    position: relative;
    height: 100%;
    display: flex;
    align-items: center;
    box-sizing: border-box;
  }

  .start-button {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #c0c0c0;
    border-width: 2px;
    border-style: outset;
    border-color: #f0f0f0 #808080 #808080 #f0f0f0;
    padding: 0 12px; /* Adjusted padding, relying on height for vertical */
    margin: 0;
    margin-left: 3px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-weight: bold;
    font-family: inherit;
    font-size: inherit;
    color: #000000;
    height: 32px;
    box-sizing: border-box;
    line-height: 30px; /* Match height closely minus borders if possible */
    white-space: nowrap;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  .start-button span { /* Control line height of text inside button */
    line-height: 1;
    display: inline-block; /* Helps with vertical alignment */
  }

  .start-button:active {
    border-style: inset;
    padding: 1px 11px 0px 13px; /* Adjust active padding for visual press */
  }

  .start-button:focus {
    outline: 1px dotted #000000;
    outline-offset: -4px;
  }
  .start-button::-moz-focus-inner {
    border: 0;
    padding: 0;
  }

  .start-icon {
    width: 22px;
    height: 22px;
    margin-right: 7px;
    object-fit: contain;
    display: inline-block;
    vertical-align: middle; /* Consistent vertical alignment */
  }

  .start-menu {
    display: none;
    position: absolute;
    bottom: 100%;
    left: 0;
    width: 280px;
    background-color: #c0c0c0;
    border-width: 2px;
    border-style: outset;
    border-color: #f0f0f0 #808080 #808080 #f0f0f0;
    box-shadow: 3px 3px 6px rgba(0,0,0,0.3);
    padding: 4px;
    z-index: 1001;
    font-size: 15px;
    text-align: left;
    box-sizing: border-box;
  }

  .start-button-container:hover .start-menu,
  .start-button:focus + .start-menu,
  .start-menu:hover {
    display: block;
  }

  .start-menu ul {
    list-style: none;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .start-menu li {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .start-menu li a {
    display: flex;
    align-items: center;
    padding: 7px 18px; /* Simplified padding, increased vertical */
    text-decoration: none;
    color: #000000;
    white-space: nowrap;
    box-sizing: border-box;
    line-height: 1.2; /* Ensure consistent line height for menu items */
  }

  .start-menu li a:hover {
    background-color: #000080;
    color: #ffffff;
  }

  .start-menu li.divider hr {
    border: 0;
    border-top: 1px solid #808080;
    border-bottom: 1px solid #ffffff;
    margin: 5px 1px;
    height: 0px;
    box-sizing: border-box;
  }

  .clock-container {
    margin-left: auto;
    padding: 0 10px; /* Adjusted padding */
    height: 32px;
    border-width: 2px;
    border-style: inset;
    border-color: #808080 #f0f0f0 #f0f0f0 #808080;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 80px;
    box-sizing: border-box;
    margin-right: 3px;
    line-height: 30px; /* Match height */
  }
  .clock-time {
    font-family: 'Tahoma', 'Geneva', 'MS Sans Serif', sans-serif;
    font-size: 15px;
    line-height: 1; /* Control its own line height */
  }

  /* --- Media Query for Smaller Screens --- */
  @media (max-width: 600px) {
    .windows-toolbar {
      height: 32px;
      font-size: 13px;
      padding: 0 3px;
    }
    .start-button {
      height: 26px;
      padding: 0 8px;
      margin-left: 2px;
      line-height: 24px; /* Adjust for button height */
    }
    .start-button:active {
      padding: 1px 7px 0px 9px;
    }
    .start-icon {
      width: 16px;
      height: 16px;
      margin-right: 5px;
    }
    .start-menu {
      width: 200px;
      font-size: 13px;
      padding: 2px;
    }
    .start-menu li a {
      padding: 5px 10px;
    }
     .start-menu li.divider hr {
      margin: 3px 1px;
    }
    .clock-container {
      height: 26px;
      padding: 0 6px;
      min-width: 65px;
      margin-right: 2px;
      line-height: 24px; /* Adjust for container height */
    }
    .clock-time {
      font-size: 13px;
    }
  }
</style>

<script>
  function setupLiveClock() {
    const clockTimeElement = document.querySelector('.windows-toolbar .clock-container .clock-time');
    if (clockTimeElement) {
      function updateClock() {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        clockTimeElement.textContent = timeString;
      }
      updateClock();
      setInterval(updateClock, 1000);
    }
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupLiveClock);
  } else {
    setupLiveClock();
  }
</script>
